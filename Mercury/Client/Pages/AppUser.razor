@page "/AppUser"
@using Mercury.Shared
@using Mercury.Shared.Models;
@using Mercury.Shared.Models.AspNetUser;
@inject UserSearchManager UserSearchManager
@attribute [Authorize]

<PageTitle>Asp Net Users</PageTitle>

<RadzenText Text="Asp Net Users" TextStyle="TextStyle.DisplayH3" />

<RadzenText Text="Main information list" TextStyle="TextStyle.Subtitle1" />

@if (userSearch == null)
{
    <RadzenLabel Text="Loading..." />
}
else
{
    <RadzenDataGrid @ref="grid" Data="@userSearch" TItem="AspNetUser" ColumnWidth="200px">
        <Columns>
            <RadzenDataGridColumn TItem="AspNetUser" Property="Id" Title="User ID" Width="160px" />
            <RadzenDataGridColumn TItem="AspNetUser" Property="UserName" Title="Username" Width="160px" />
            <RadzenDataGridColumn TItem="AspNetUser" Property="Email" Title="Email" Width="200px" />
            <RadzenDataGridColumn TItem="AspNetUser" Property="PhoneNumber" Title="Phone Number" Width="160px" />
            <RadzenDataGridColumn TItem="AspNetUser" Property="LockoutEnabled" Title="Lockout Enabled" Width="160px">
                <Template Context="user">
                    @(user.LockoutEnabled ? "Yes" : "No")
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="AspNetUser" Property="LockoutEnd" Title="Lockout End" Width="160px">
                <Template Context="user">
                    @user.LockoutEnd?.ToString("d")
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>


}

@code {

    RadzenDataGrid<AspNetUser> grid;
    IEnumerable<AspNetUser> userSearch;
    AspNetUser User;
    string SearchName = "";
    string ErrorMessage = "";

    async Task GetAllUserSearch()
    {
        ErrorMessage = "";
        try
        {
            var result = await UserSearchManager.GetAspNetUsers();
            if (result != null)
            {
                userSearch = result.ToList<AspNetUser>();
                User = null;
            }
            else
            {
                ErrorMessage = "Could not fetch app users";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await GetAllUserSearch();
    }
}
