@page "/AppUser"
@using Mercury.Client.Components
@using Mercury.Shared
@using Mercury.Shared.Models;
@using Mercury.Shared.Models.AspNetUser;
@inject AspNetUserManager AspNetUserManager
@inject AspNetRoleManager AspNetRoleManager

@attribute [Authorize]

<PageTitle>Asp Net Users</PageTitle>

<RadzenText Text="Asp Net Users" TextStyle="TextStyle.DisplayH3" />

<RadzenText Text="Main information list" TextStyle="TextStyle.Subtitle1" />

@if (aspNetUsers == null)
{
    <RadzenLabel Text="Loading..." />
}
else
{


<RadzenStack  >
        <RadzenRow  class="rz-mt-5">
            <RadzenColumn Size="9" SizeLG="10">
                <GridCommands Data=@aspNetUsers />
            </RadzenColumn>
            <RadzenColumn  Size="3" SizeLG="2">
               
                <CommandsList/>

            </RadzenColumn>
        </RadzenRow>

        <RadzenRow class="rz-mt-5" >
            <RadzenColumn Size="9" SizeLG="10">
                <GridCommands Data=@aspNetRoles />
            </RadzenColumn>
            <RadzenColumn Size="3" SizeLG="2">
      

                <CommandsList/>
               

            </RadzenColumn>
        </RadzenRow>
</RadzenStack>

}


@code {


    IEnumerable<AspNetUser>? aspNetUsers;
    AspNetUser? user;
    string ErrorMessage = "";

    IEnumerable<AspNetRole>? aspNetRoles;
    AspNetRole? role;

    async Task GetAllRoles()
    {

        try
        {
            var result = await AspNetRoleManager.GetAll();
            if (result is not null)
            {
                aspNetRoles = result;
                role = null;
            }
            else
            {
                ErrorMessage = "Could not fetch app roles";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }
    async Task GetAllUsers()
    {
        ErrorMessage = "";
        try
        {
            var result = await AspNetUserManager.GetAll();
            if (result is not null)
            {
                aspNetUsers = result;
                user = null;
            }
            else
            {
                ErrorMessage = "Could not fetch app users";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await GetAllUsers();
        await GetAllRoles();
    }
}
