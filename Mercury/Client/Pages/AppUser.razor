@page "/AppUser"
@using Mercury.Client.Components
@using Mercury.Shared
@using Mercury.Shared.Models;
@using Mercury.Shared.Models.AspNetUser;
@inject AspNetUserManager AspNetUserManager
@inject AspNetRoleManager AspNetRoleManager

@attribute [Authorize]

<PageTitle>Asp Net Users</PageTitle>

<RadzenText Text="Asp Net Users" TextStyle="TextStyle.DisplayH3" />

<RadzenText Text="Main information list" TextStyle="TextStyle.Subtitle1" />

@if (aspNetUsers == null)
{
    <RadzenLabel Text="Loading..." />
}
else
{


<RadzenStack  >
        <RadzenRow  class="rz-mt-5">
            <RadzenColumn Size="9" SizeLG="10">
                <GridCommands Data=@aspNetUsers />
            </RadzenColumn>
            <RadzenColumn  Size="3" SizeLG="2">
               
                    <RadzenDataList AllowVirtualization="true" Style="height: 50vh; overflow: auto;"
                                    Data="@commandGroupsUsers" TItem="CommandGroupStr">
                        <Template Context="command">
                            <CommandGroup GroupStr="command" />
                        </Template>
                    </RadzenDataList>


            </RadzenColumn>
        </RadzenRow>

        <RadzenRow class="rz-mt-5" >
            <RadzenColumn Size="9" SizeLG="10">
                <GridCommands Data=@aspNetRoles />
            </RadzenColumn>
            <RadzenColumn  Size="3" SizeLG="2">

                <RadzenDataList AllowVirtualization="true"  Style="height: 50vh;overflow: auto;"
                    Data="@commandGroupsRoles" TItem="CommandGroupStr">
                    <Template Context="command">
                        <CommandGroup GroupStr="command" />
                    </Template>
                </RadzenDataList>

            </RadzenColumn>
        </RadzenRow>
</RadzenStack>

}


@code {


    IEnumerable<AspNetUser>? aspNetUsers;
    AspNetUser? user;
    string ErrorMessage = "";
    List<CommandGroupStr>? commandGroupsUsers;

    //same but for roles


    IEnumerable<AspNetRole>? aspNetRoles;
    AspNetRole? role;
    List<CommandGroupStr>? commandGroupsRoles;


    protected override void OnInitialized()
    {
        var commands = new List<CommandGroupStr>()
{
new CommandGroupStr
{
Title = "Basic operations",
Buttons = new List<CommandButtonStr>
{
new CommandButtonStr{ Variant = "Outlined", ButtonStyle = "Success", Icon = "add" },
new CommandButtonStr{ Variant = "Outlined", ButtonStyle = "Primary", Icon = "edit" },
new CommandButtonStr{ Variant = "Outlined", ButtonStyle = "Danger", Icon = "delete" }
}
},
new CommandGroupStr
{
Title = "Exports",
Buttons = new List<CommandButtonStr>
{
new CommandButtonStr{ Size = "Small", Variant = "Outlined", Text = "xlsx" },
new CommandButtonStr{ Size = "Small", Variant = "Outlined", Text = "csv" },
new CommandButtonStr{ Size = "Small", Variant = "Outlined", Text = "txt" }
}
},
new CommandGroupStr
{
Title = "The user access to application",
Buttons = new List<CommandButtonStr>
{
new CommandButtonStr{ Size = "Small", Variant = "Filled", ButtonStyle = "Success", Text = "Unlock", Icon="lock_open" },
new CommandButtonStr{ Size = "Small", Variant = "Filled", ButtonStyle = "Danger", Text = "Lock" , Icon="lock"}
}
},
new CommandGroupStr
{
Title = "Re-send 2 factor authentication code by",
Buttons = new List<CommandButtonStr>
{
new CommandButtonStr{ Size = "Small", Variant = "Filled", ButtonStyle = "Light", Text = "Email", Icon="mail_outline"},
new CommandButtonStr{ Size = "Small", Variant = "Filled", ButtonStyle = "Light", Text = "Phone", Icon="phone" }
}
},
new CommandGroupStr
{
Title = "Force user's next login password reset",
Buttons = new List<CommandButtonStr>
{
new CommandButtonStr{ Size = "Small", Variant = "Filled", ButtonStyle = "Light", Text = "Start the password reset",
Icon="lock_reset" },
}
}
};
        commandGroupsUsers = commands;
        commandGroupsRoles = commands;
        base.OnInitialized();
    }

    async Task GetAllRoles()
    {

        try
        {
            var result = await AspNetRoleManager.GetAll();
            if (result is not null)
            {
                aspNetRoles = result;
                role = null;
            }
            else
            {
                ErrorMessage = "Could not fetch app roles";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }
    async Task GetAllUsers()
    {
        ErrorMessage = "";
        try
        {
            var result = await AspNetUserManager.GetAll();
            if (result is not null)
            {
                aspNetUsers = result;
                user = null;
            }
            else
            {
                ErrorMessage = "Could not fetch app users";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await GetAllUsers();
        await GetAllRoles();
    }
}
